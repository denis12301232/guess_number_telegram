import { CommandContext, Bot } from 'grammy'
import { MyContext } from '@/types/interfaces'
import StatModel from '@/models/Stat'
import UserModel from '@/models/User'
import Util from '@/libs/Util'
import BotApi from '@/bot/BotApi'


export default class Commands {
   static async start(ctx: CommandContext<MyContext>) {
      try {
         const { first_name, last_name, username } = ctx.msg.from!;
         const user = await UserModel.findOne({ chatId: ctx.from?.id }).lean();

         if (!user) {
            const newUser = await UserModel.create({ chatId: ctx.from?.id, name: first_name, lastname: last_name, username });
            await StatModel.create({ user: newUser._id });
         } else {
            await UserModel.updateOne({ chatId: ctx.from?.id }, { $set: { name: first_name, lastname: last_name, username } });
         }
         return ctx.api.sendMessage(ctx.chat.id,
            `–ò–≥—Ä–∞ "<b>–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ</b>":\n–í —ç—Ç–æ–π –∏–≥—Ä–µ –≤–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ—é —É–¥–∞—á—É! –î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /play!`,
            { parse_mode: 'HTML' });
      } catch (e) {
         if (e instanceof Error) console.log(e.message);
         return ctx.reply('–£–ø—Å... –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!');
      }
   }

   static async play(ctx: CommandContext<MyContext>) {
      try {
         await BotApi.deleteMessages(ctx, ctx.session.message_ids);
         const msg1 = await ctx.reply('–ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É! –Ø –∑–∞–≥–∞–¥—ã–≤–∞—é —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 9, —É–≥–∞–¥–∞–π –µ–≥–æ!');
         const randomNumber = Util.randomInteger(0, 9);
         ctx.session.currentHidden = randomNumber;
         const msg2 = await ctx.reply('–ò—Ç–∞–∫, –≤—ã–±–∏—Ä–∞–π —á–∏—Å–ª–æ!', { reply_markup: BotApi.numbersInlineKeyboard });
         return ctx.session.message_ids = [...ctx.session.message_ids, msg1.message_id, msg2.message_id];
      } catch (e) {
         if (e instanceof Error) console.log(e.message);
         return ctx.reply('–£–ø—Å... –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!');
      }
   }

   static async stats(ctx: CommandContext<MyContext>) {
      try {
         const user = await UserModel.findOne({ chatId: ctx.from?.id }).lean();
         const stats = await StatModel.findOne({ user: user?._id }).lean();
         return ctx.reply(`–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–í–µ—Ä–Ω–æ –æ—Ç–≥–∞–¥–∞–Ω–æ: ${stats?.rightAnswers}\n–ù–µ –≤–µ—Ä–Ω–æ: ${stats?.wrongAnswers}\n–û—Ç–≥–∞–¥–Ω–æ ${stats?.percent.toFixed(0)}% —á–∏—Å–µ–ª!`);
      } catch (e) {
         if (e instanceof Error) console.log(e.message);
         return ctx.reply('–£–ø—Å... –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!');
      }
   }

   static setNumbersCallbacks(bot: Bot<MyContext>) {
      for (let i = 0; i <= 9; i++) {
         bot.callbackQuery(`${i}`, async (ctx) => {
            try {
               await ctx.editMessageReplyMarkup();
               await ctx.reply(`–í—ã–±—Ä–∞–Ω–æ —á–∏—Å–ª–æ ${i}.`);
               const user = await UserModel.findOne({ chatId: ctx.from.id }).lean();
               const stat = await StatModel.findOne({ user: user?._id });
               stat!.total += 1;
               if (i === ctx.session.currentHidden) {
                  stat!.rightAnswers += 1;
                  await ctx.reply(`–≠—Ç–æ –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç! üèÜ`, {
                     reply_markup: BotApi.restartInlineButton
                  });
               } else {
                  stat!.wrongAnswers += 1;
                  await ctx.reply(`–£–≤—ã, —ç—Ç–æ –Ω–µ —Ç–æ —á–∏—Å–ª–æ. –ë—ã–ª–æ –∑–∞–≥–∞–¥–∞–Ω–æ: ${ctx.session.currentHidden}!`, {
                     reply_markup: BotApi.restartInlineButton
                  });
               }
               stat!.percent = stat!.rightAnswers / stat!.total * 100;
               return stat?.save();
            } catch (e) {
               if (e instanceof Error) console.log(e.message);
               return ctx.reply('–£–ø—Å... –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!');
            }
         });
      }
   }

   static restart(bot: Bot<MyContext>) {
      bot.callbackQuery('restart', async (ctx) => {
         try {
            await BotApi.deleteMessages(ctx, ctx.session.message_ids);
            await ctx.editMessageReplyMarkup();
            const randomNumber = Util.randomInteger(0, 9);
            ctx.session.currentHidden = randomNumber;
            const msg1 = await ctx.reply('–ò—Ç–∞–∫, –≤—ã–±–∏—Ä–∞–π —á–∏—Å–ª–æ!', { reply_markup: BotApi.numbersInlineKeyboard });
            return ctx.session.message_ids.push(msg1.message_id);
         } catch (e) {
            if (e instanceof Error) console.log(e.message);
            return ctx.reply('–£–ø—Å... –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!');
         }
      });
   }
}